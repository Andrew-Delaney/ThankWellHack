{"version":3,"sources":["components/HeaderBar/HeaderBar.jsx","components/ActionButton/ActionButton.jsx","components/ThanksComposer/ThanksComposer.jsx","components/Dashboard/Dashboard.jsx","components/Homepage/Homepage.jsx","components/ThanksReceiver/ThanksReceiver.jsx","App.js","serviceWorker.js","index.js"],"names":["HeaderBar","className","to","ActionButton","buttonText","onClick","ThanksComposer","useState","textInput","setTextInput","recipient","setRecipient","htmlFor","type","onChange","input","target","value","id","placeholder","fetch","method","then","response","json","data","console","log","Dashboard","allThanks","setAllThanks","useEffect","map","thanks","JSON","stringify","Homepage","props","component","ThanksReceiver","state","message","this","match","params","setState","Component","App","path","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.a9fb7275.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Bell } from 'react-feather';\r\nimport { User } from 'react-feather';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport \"./HeaderBar.scss\";\r\n\r\nvar HeaderBar = () => (\r\n    <div className=\"HeaderBar\">\r\n        <Link className=\"HeaderBar-link\" to=\"/\">Home</Link>\r\n        <Link className=\"HeaderBar-link\" to=\"/give-thanks\">Give Thanks</Link>\r\n        <Link className=\"HeaderBar-link\" to=\"/groups\">Groups</Link>\r\n        <Link className=\"HeaderBar-link\" to=\"/messages\">Messages</Link>\r\n        <div className=\"HeaderBar-icon\"><Bell/></div>\r\n        <div className=\"HeaderBar-icon\"><User/></div>\r\n    </div>\r\n);\r\n\r\nexport default HeaderBar;\r\n","import React from 'react';\r\n\r\nimport \"./ActionButton.scss\";\r\n\r\nvar ActionButton = ({ buttonText, onClick }) => <button className=\"ActionButton\" onClick={onClick}>{buttonText}</button>;\r\n\r\nexport default ActionButton;","import React, {useState} from 'react';\r\nimport \"./ThanksComposer.scss\";\r\nimport ActionButton from '../ActionButton/ActionButton';\r\n\r\nconst ThanksComposer = () => {\r\n    const [textInput, setTextInput] = useState(\"\");\r\n    const [recipient, setRecipient] = useState(\"\");\r\n\r\n    function submit() {\r\n        fetch(`/api/thanks?message=${textInput}&recipient=${recipient}`, {method: \"POST\"})\r\n            .then(response => response.json())\r\n            .then(data => console.log(data));\r\n    }\r\n\r\n    return (\r\n        <div className=\"ThanksComposer\">\r\n            <h2 htmlFor=\"thanks-input\" className=\"m-3 pb-4 font-weight-bolder\">Give Thanks</h2>\r\n            <div className=\"ThanksComposer-input\">\r\n                <label htmlFor=\"thanks-input\">\r\n                    <span className=\"recipient-input pr-2 font-weight-bold\">To:</span>\r\n                    <input type=\"text\" className=\"recipient-input thanks-border\"\r\n                           onChange={input => setRecipient(input.target.value)}/>\r\n                </label>\r\n                <textarea\r\n                    id=\"thanks-input\"\r\n                    className=\"ThanksComposer-input-text thanks-border\"\r\n                    value={textInput}\r\n                    onChange={input => setTextInput(input.target.value)}\r\n                    placeholder=\"Personalise your thank you message.\"\r\n                >\r\n                </textarea>\r\n                <div className=\"ThanksComposer-input-submit\">\r\n                    <ActionButton\r\n                        buttonText=\"Thank\"\r\n                        onClick={() => submit()}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ThanksComposer;\r\n","import React, {useEffect, useState} from 'react';\r\n\r\nconst Dashboard = () => {\r\n    const [allThanks, setAllThanks] = useState([]);\r\n\r\n    useEffect( () => {\r\n        fetch(`/api/all`)\r\n            .then(response => response.json())\r\n            .then(data => setAllThanks(data))\r\n            .then(data => console.log(data));\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            <h2 className=\"m-3 pb-4 font-weight-bolder\">Home</h2>\r\n            {allThanks && allThanks.map(thanks => <div><span>{JSON.stringify(thanks)}</span><br/></div>)}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Dashboard;\r\n","import React from 'react';\r\nimport ThanksComposer from '../ThanksComposer/ThanksComposer';\r\nimport Dashboard from \"../Dashboard/Dashboard\";\r\n\r\nconst Homepage = ({props}) => (\r\n    <div className=\"Homepage container container-fluid\">\r\n        <props.component/>\r\n    </div>\r\n);\r\n\r\n\r\nexport default Homepage;\r\n","import React, {Component} from 'react';\r\n\r\nexport default class ThanksReceiver extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {id: null, message: null, recipient: null};\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch(`/api/thanks/${this.props.match.params.id}`)\r\n            .then(response => response.json())\r\n            .then(data => this.setState(data));\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"ThanksComposer\">\r\n                <span>test - {JSON.stringify(this.state)}</span>\r\n            </div>\r\n        )\r\n    };\r\n};\r\n","import React from 'react';\r\nimport {BrowserRouter as Router, Route, Switch} from \"react-router-dom\";\r\nimport HeaderBar from './components/HeaderBar/HeaderBar';\r\nimport Homepage from './components/Homepage/Homepage';\r\nimport ThanksReceiver from \"./components/ThanksReceiver/ThanksReceiver\";\r\n\r\nimport \"./App.scss\";\r\nimport ThanksComposer from \"./components/ThanksComposer/ThanksComposer\";\r\nimport Dashboard from \"./components/Dashboard/Dashboard\";\r\n\r\nconst App = () => {\r\n    return (\r\n        <Router>\r\n            <div className=\"App\">\r\n                <HeaderBar/>\r\n                <Switch>\r\n                    <Route path=\"/messages\"/>\r\n                    <Route path=\"/groups\"/>\r\n                    <Route path=\"/thanks/:id\" component={ThanksReceiver}/>\r\n                    <Route path=\"/give-thanks\"><Homepage props={{component: ThanksComposer}}/></Route>\r\n                    <Route path=\"/\"><Homepage props={{component: Dashboard}}/></Route>\r\n                </Switch>\r\n            </div>\r\n        </Router>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}